docker build -t my_app .
COnstruye una IMAGEN (. es coger el dockerfile del directorio actual)
docker images

docker run -it --rm --name my-running-app my_app

docker system prune -> Borra basura de docker de forma automatica

Dockerfile example:

FROM python:3.7-slim

WORKDIR /homework

RUN apt-get install -y --no-install-recommends gcc python3-dev libssl-de

COPY Pipfile Pipfile.lock ./

RUN pip install pipenv && \
  apt-get update && \
  pipenv install --deploy --system

COPY app .
ENTRYPOINT ["./app/util.py"]



CMD = Lo que se va a ejecutar cuando se arranque el contenedor, se puede
        sobreescribir por el usuario que ejecuta el docker run

ENTRYPOINT = Es lo que se va a ejecutar cuando se arranque el contenedor,
            el usuario puede añadir parámetros extras a ese comando, pero no utilizar otro


Ejercicios docker:

1º Creame una imagen con nginx que me muestre el html

`<h1> Hello world mother fucker! </h1>` en el puerto 9999

http://dir_docker:9999

2º Una imagen docker para poder usar maven (mvn) sin tener java ni maven instalado

3º creame un docker compose
 * que solo exponga el puerto 80
 * si pongo `http://dir_docker:80/nginx` me lleve a un nginx
 * si pongo `http://dir_docker:80/apache` me lleve a un apache

La redireccion debe hacerse por traefik (https://doc.traefik.io/traefik/)

Basicamente es tener 3 contenedores en el docker-compose, el que se expone es el traefik que enrutará
a los otros contenedores en base a un path. Los contenedores usados deben de ser los por defecto

4º Quiero ejecutar tu aplicacion de RedHat en mi pc si descargarme el codigo.